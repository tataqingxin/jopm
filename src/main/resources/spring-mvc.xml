<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/aop  
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<context:annotation-config />
	<!-- 自动扫描controller包下的所有类，作为spring mvc的控制器 -->
	<!-- 加载controller的时候,不加载service,因为此时事物并未生效,若此时加载了service,那么事物无法对service进行拦截 -->
	<context:component-scan base-package="com.zjy.*,com.unistc.core.*">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>
	
	<!-- 加载service,此时要排除要controller,因为controller已经spring-mvc中加载过了 -->
	<context:component-scan base-package="com.zjy.*,com.unistc.core.*">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<aop:aspectj-autoproxy/> 
	
	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	
	<!-- Spring MVC 转换器，解决日期转换、JSON转换问题-->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="cacheSeconds" value="0" />
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /><!-- json转换器 -->
			</list>
		</property>
		<property name="webBindingInitializer">
			<bean class="com.unistc.core.interceptor.JumpWebBindingInitializer" />
		</property>
	</bean>
	<!-- 默认的视图解析器  -->
	<bean id="defaultViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:order="3">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="contentType" value="text/html" />
		<property name="prefix" value="/webpage/" />
		<property name="suffix" value=".html" />
	</bean>
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="UTF-8">
		<property name="maxUploadSize">
			<value>104857600</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>
	<!-- 异常处理类 -->
	<!-- <bean id="exceptionHandler" class="org.jeecgframework.core.common.exception.MyExceptionHandler" 
		/> -->
	<!-- 系统错误转发配置[并记录错误日志] -->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView" value="500"></property>   <!-- 默认为500，系统错误(error.jsp) -->
		<property name="defaultStatusCode" value="404"></property>
		<property name="statusCodes"><!-- 配置多个statusCode -->
			<props>
				<prop key="error">500</prop>  <!-- error.jsp -->
				<prop key="error1">404</prop>    <!-- error1.jsp -->
			</props>
		</property>
		<property name="exceptionMappings">
			<props>
				<!-- 这里你可以根据需要定义N多个错误异常转发 -->
				<prop key="java.sql.SQLException">/common/dbError</prop> <!-- 数据库错误(dbError.jsp) -->
				<prop key="org.springframework.web.bind.ServletRequestBindingException">/common/bindError</prop> <!-- 参数绑定错误(如：必须参数没传递)(bizError.jsp) -->
				<prop key="java.lang.IllegalArgumentException">/common/illegalError</prop>  <!-- 参数错误(bizError.jsp) -->
				<prop key="org.springframework.validation.BindException">/common/bindError</prop>  <!-- 参数类型有误(bizError.jsp) -->
				<prop key="java.lang.Exception">/common/unknowError</prop>  <!-- 其他错误为'未定义错误'(unknowError.jsp) -->
			</props>
		</property>
	</bean>
	<!-- 拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.unistc.core.interceptor.EncodingInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.zjy.jopm.base.interceptor.AuthInterceptor">
				<property name="excludeUrls">
					<list>
						<value>loginController/login/user</value>
						<value>webosController/getAllMenu</value>
						<value>webosController/downloadApp</value>
						<value>webosController/getBaseMenu</value>
						<value>webosController/checkLeftMenuIsAuthority</value>
						<value>webosController/checkDeskMenuIsAuthority</value>
						<value>webosController/searchClause</value>
						<value>visitorController/getVisitorSwitch</value>
						<value>visitorController/getVisitorFunction</value>
						<value>extAppController/appInstanceCodeList</value>
						<value>extAppController/getAppInstanceCodeAndUrl</value>
					</list>
				</property>
			</bean>
		</mvc:interceptor>
			
		<!-- 国际化拦截器， 如果采用基于（请求/Session/Cookie）则必需配置 --> 
   	<bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" /> 
	</mvc:interceptors>

	<!-- 平台Bean获取工具 -->
	<bean id="platform" class="com.unistc.utils.Platform" />
	
	<!-- webos安全访问时，需要的的安排检查 -->
	
	<!-- 定义国际化消息-->  
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<!-- 其中basename用来指定properties文件的通用名, 如messages_en.properties -->
		<property name="basename" value="messages"></property>
		<property name="useCodeAsDefaultMessage" value="true" />
	</bean>
	
	<!-- Local -->
   	<bean id="sessionLocaleResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />
	<bean id="cookieLocaleResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />
</beans>